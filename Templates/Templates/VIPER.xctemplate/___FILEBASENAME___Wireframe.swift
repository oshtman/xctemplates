//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by @oshtman's VIPER generator
//

import UIKit

protocol ___VARIABLE_moduleName___WireframeInput {

}

final class ___VARIABLE_moduleName___Wireframe: BaseWireframe {

        func prepare() -> UIViewController? {
        guard let view = UIStoryboard(name: <#Storyboard name#>, bundle: Bundle.main).instantiateViewController(withIdentifier: ___VARIABLE_moduleName___Wireframe.identifier) as? ___VARIABLE_moduleName___ViewController else { return nil } 
        configureModule(with: view)        
        return view
    }

    func configureModule(with view: UIViewController) {

        let interactor = ___VARIABLE_moduleName___Interactor()
        let dataManager = ___VARIABLE_moduleName___DataManager()
        let presenter = ___VARIABLE_moduleName___Presenter(wireframe: self, view: view, interactor: interactor)
        
        // Wire stuff
        interactor.presenter = presenter
        view?.presenter = presenter
        interactor.dataManager = dataManager
        dataManager.interactor = interactor
    }
    
    func present(_ data: [String : Any]?, from source: BaseWireframe?)  {
        guard let view = prepare() else { return }
    }
    
    func dismiss(_ view: Any?) {

    }

}

//MARK: - Extensions

extension ___VARIABLE_moduleName___Wireframe: ___VARIABLE_moduleName___WireframeInput {
    
}